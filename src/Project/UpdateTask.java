package Project;

import javax.swing.JOptionPane;
import java.sql.*;
import java.io.File;
import java.util.HashMap;

public class UpdateTask extends javax.swing.JFrame {

    Database db = new Database();
    HashMap<String, Integer> taskHashMap = new HashMap<String, Integer>();
    public final String url = "jdbc:sqlite:tasksDB";

    /**
     * Creates new form UpdateTask
     */
    public UpdateTask() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        lblSelectedTC = new javax.swing.JLabel();
        cmbSelectedTC = new javax.swing.JComboBox<>();
        lpBackground = new javax.swing.JLayeredPane();
        lblUpdateName = new javax.swing.JLabel();
        txtUpdateName = new javax.swing.JTextField();
        lblUpdateDescription = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtareaUpdateDescription = new javax.swing.JTextArea();
        lblUpdateCompletionStatus = new javax.swing.JLabel();
        cmbUpdateCompletionStatus = new javax.swing.JComboBox<>();
        lblUpdateCategory = new javax.swing.JLabel();
        cmbUpdateCategory = new javax.swing.JComboBox<>();
        btnUpdateTask = new javax.swing.JButton();
        lblSelectedTask = new javax.swing.JLabel();
        cmbSelectedTask = new javax.swing.JComboBox<>();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        lblTitle.setFont(new java.awt.Font("Segoe Script", 0, 36)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(51, 51, 51));
        lblTitle.setText("Update Task");

        lblSelectedTC.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lblSelectedTC.setForeground(new java.awt.Color(51, 51, 51));
        lblSelectedTC.setText("Select Task Category:");

        cmbSelectedTC.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cmbSelectedTC.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbSelectedTCItemStateChanged(evt);
            }
        });

        lpBackground.setBackground(new java.awt.Color(204, 204, 204));
        lpBackground.setOpaque(true);

        lblUpdateName.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lblUpdateName.setForeground(new java.awt.Color(51, 51, 51));
        lblUpdateName.setText("Name:");

        lblUpdateDescription.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lblUpdateDescription.setForeground(new java.awt.Color(51, 51, 51));
        lblUpdateDescription.setText("Description:");

        txtareaUpdateDescription.setColumns(20);
        txtareaUpdateDescription.setRows(5);
        jScrollPane1.setViewportView(txtareaUpdateDescription);

        lblUpdateCompletionStatus.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lblUpdateCompletionStatus.setForeground(new java.awt.Color(51, 51, 51));
        lblUpdateCompletionStatus.setText("Completion Status:");

        cmbUpdateCompletionStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Completed", "Not Completed" }));

        lblUpdateCategory.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lblUpdateCategory.setForeground(new java.awt.Color(51, 51, 51));
        lblUpdateCategory.setText("Category:");

        btnUpdateTask.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnUpdateTask.setForeground(new java.awt.Color(51, 51, 51));
        btnUpdateTask.setText("Update Task");
        btnUpdateTask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateTaskActionPerformed(evt);
            }
        });

        lpBackground.setLayer(lblUpdateName, javax.swing.JLayeredPane.DEFAULT_LAYER);
        lpBackground.setLayer(txtUpdateName, javax.swing.JLayeredPane.DEFAULT_LAYER);
        lpBackground.setLayer(lblUpdateDescription, javax.swing.JLayeredPane.DEFAULT_LAYER);
        lpBackground.setLayer(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        lpBackground.setLayer(lblUpdateCompletionStatus, javax.swing.JLayeredPane.DEFAULT_LAYER);
        lpBackground.setLayer(cmbUpdateCompletionStatus, javax.swing.JLayeredPane.DEFAULT_LAYER);
        lpBackground.setLayer(lblUpdateCategory, javax.swing.JLayeredPane.DEFAULT_LAYER);
        lpBackground.setLayer(cmbUpdateCategory, javax.swing.JLayeredPane.DEFAULT_LAYER);
        lpBackground.setLayer(btnUpdateTask, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout lpBackgroundLayout = new javax.swing.GroupLayout(lpBackground);
        lpBackground.setLayout(lpBackgroundLayout);
        lpBackgroundLayout.setHorizontalGroup(
            lpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lpBackgroundLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(lpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtUpdateName)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE)
                    .addGroup(lpBackgroundLayout.createSequentialGroup()
                        .addGroup(lpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblUpdateCategory)
                            .addGroup(lpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(cmbUpdateCategory, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblUpdateName, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblUpdateDescription, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblUpdateCompletionStatus, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                                .addComponent(cmbUpdateCompletionStatus, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(0, 214, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, lpBackgroundLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnUpdateTask)))
                .addContainerGap())
        );
        lpBackgroundLayout.setVerticalGroup(
            lpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lpBackgroundLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(lblUpdateName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtUpdateName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblUpdateDescription)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblUpdateCompletionStatus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbUpdateCompletionStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblUpdateCategory)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbUpdateCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 85, Short.MAX_VALUE)
                .addComponent(btnUpdateTask)
                .addContainerGap())
        );

        lblSelectedTask.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lblSelectedTask.setForeground(new java.awt.Color(51, 51, 51));
        lblSelectedTask.setText("Select Task:");

        cmbSelectedTask.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cmbSelectedTask.setMaximumSize(new java.awt.Dimension(175, 22));
        cmbSelectedTask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSelectedTaskActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(cmbSelectedTC, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblSelectedTC, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblSelectedTask, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbSelectedTask, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTitle)
                            .addComponent(lpBackground, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSelectedTC)
                    .addComponent(lblSelectedTask))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbSelectedTC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbSelectedTask, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(lpBackground)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public void clearALl() {
        txtUpdateName.setText("");
        txtareaUpdateDescription.setText("");
        cmbUpdateCompletionStatus.setSelectedIndex(0);
        cmbUpdateCategory.removeAllItems();
    }

    public void populateCmbTaskCategory() {
        cmbSelectedTC.removeAllItems();

        File f = new File("tasksDB");

        if (f.exists()) {
            try {
                Connection connection = DriverManager.getConnection(url);

                String sql = "SELECT DISTINCT Category FROM TasksTbl";

                Statement statement = connection.createStatement();
                ResultSet rs = statement.executeQuery(sql);

                while (rs.next()) {
                    cmbSelectedTC.addItem(rs.getString("Category"));
                }

                rs.close();
                statement.close();
                connection.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(rootPane, e.getMessage());
            }
        }
    }

    public void populateCmbSelectedTask(String category) {
        cmbSelectedTask.removeAllItems();
        taskHashMap.clear();

        File f = new File("tasksDB");

        if (f.exists()) {
            try {
                Connection connection = DriverManager.getConnection(url);

                String sql = "SELECT * FROM TasksTbl WHERE Category = '" + category + "'";

                Statement statement = connection.createStatement();

                ResultSet rs = statement.executeQuery(sql);

                while (rs.next()) {
                    cmbSelectedTask.addItem("Name - " + rs.getString(2));
                    taskHashMap.put("Name - " + rs.getString(2), rs.getInt(1));
                }

                rs.close();
                statement.close();
                connection.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(rootPane, e.getMessage());
            }
        }
    }

    public void returnData(String categoty) {
        File f = new File("tasksDB");

        if (f.exists()) {
            try {
                Connection connection = DriverManager.getConnection(url);

                String sql = "SELECT * FROM TasksTbl WHERE ID = " + taskHashMap.get(categoty);

                Statement statement = connection.createStatement();

                ResultSet rs = statement.executeQuery(sql);

                while (rs.next()) {
                    txtUpdateName.setText(rs.getString(2));
                    txtareaUpdateDescription.setText(rs.getString(3));
                    cmbUpdateCompletionStatus.setSelectedItem(rs.getString(4));
                    cmbUpdateCategory.setSelectedItem(rs.getString(5));
                }

                rs.close();
                statement.close();
                connection.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(rootPane, e.getMessage());
            }
        }
    }

    public void updateTask() {
        File f = new File("tasksDB");

        if (f.exists()) {
            try {
                Connection connection = DriverManager.getConnection(url);

                String sql = "UPDATE TasksTbl "
                        + "SET Name = '" + txtUpdateName.getText() + "', "
                        + "Description = '" + txtareaUpdateDescription.getText() + "', "
                        + "Completion_Status = '" + cmbUpdateCompletionStatus.getSelectedItem() + "', "
                        + "Category = '" + cmbUpdateCategory.getSelectedItem() + "' "
                        + "WHERE ID = " + taskHashMap.get(cmbSelectedTask.getSelectedItem().toString());

                Statement statement = connection.createStatement();

                boolean res = statement.execute(sql);

                if (!res) {
                    JOptionPane.showMessageDialog(rootPane, "Data successfully updated");
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Data could not be updated");
                }

                statement.close();
                connection.close();

            } catch (SQLException e) {
                JOptionPane.showMessageDialog(rootPane, e.getMessage());
            }
        }
    }

    private void btnUpdateTaskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateTaskActionPerformed
        updateTask();
        clearALl();
        db.loadCategory(cmbUpdateCategory);
        if (cmbSelectedTC.getSelectedItem() != null) {
            populateCmbSelectedTask(cmbSelectedTC.getSelectedItem().toString());
        }
    }//GEN-LAST:event_btnUpdateTaskActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        db.loadCategory(cmbUpdateCategory);
        populateCmbTaskCategory();
        if (cmbSelectedTC.getSelectedItem() != null) {
            populateCmbSelectedTask(cmbSelectedTC.getSelectedItem().toString());
        }
    }//GEN-LAST:event_formWindowOpened

    private void cmbSelectedTCItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbSelectedTCItemStateChanged
        if (cmbSelectedTC.getSelectedItem() != null) {
            populateCmbSelectedTask(cmbSelectedTC.getSelectedItem().toString());
        }
    }//GEN-LAST:event_cmbSelectedTCItemStateChanged

    private void cmbSelectedTaskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSelectedTaskActionPerformed
        if (cmbSelectedTask.getSelectedItem() != null) {
            returnData(cmbSelectedTask.getSelectedItem().toString());
        }

    }//GEN-LAST:event_cmbSelectedTaskActionPerformed

    public static void main(String args[]) {
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UpdateTask.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UpdateTask.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UpdateTask.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UpdateTask.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UpdateTask().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnUpdateTask;
    private javax.swing.JComboBox<String> cmbSelectedTC;
    private javax.swing.JComboBox<String> cmbSelectedTask;
    private javax.swing.JComboBox<String> cmbUpdateCategory;
    private javax.swing.JComboBox<String> cmbUpdateCompletionStatus;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblSelectedTC;
    private javax.swing.JLabel lblSelectedTask;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblUpdateCategory;
    private javax.swing.JLabel lblUpdateCompletionStatus;
    private javax.swing.JLabel lblUpdateDescription;
    private javax.swing.JLabel lblUpdateName;
    private javax.swing.JLayeredPane lpBackground;
    private javax.swing.JTextField txtUpdateName;
    private javax.swing.JTextArea txtareaUpdateDescription;
    // End of variables declaration//GEN-END:variables
}
